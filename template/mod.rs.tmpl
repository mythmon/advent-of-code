use crate::cases::{GenericPuzzleCase, PuzzleCase, PuzzleRunner};
use std::iter::Iterator;

#[derive(Debug)]
pub struct Day{{DAY_PADDED}}Part1;

impl PuzzleRunner for Day{{DAY_PADDED}}Part1 {
    type Input = &'static str;
    type Output = i32;

    fn name(&self) -> String {
        "{{YEAR}}-D{{DAY_PADDED}}-P1".to_owned()
    }

    fn cases(&self) -> Vec<Box<dyn PuzzleCase>> {
        GenericPuzzleCase::<Self, _, _>::build_set()
            .case("Example", "example", None)
            .case("Solution", include_str!("input"), None)
            .collect()
    }

    fn run_puzzle(input: Self::Input) -> Self::Output {
        unimplemented!();
    }
}

// #[derive(Debug)]
// pub struct Day{{DAY_PADDED}}Part2;
//
// impl PuzzleRunner for Day{{DAY_PADDED}}Part2 {
//     type Input = &'static str;
//     type Output = u32;
// 
//     fn name(&self) -> String {
//         "{{YEAR}}-D{{DAY_PADDED}}-P2".to_owned()
//     }
// 
//     fn cases(&self) -> Vec<Box<dyn PuzzleCase>> {
//         GenericPuzzleCase::<Self, _, _>::build_set()
//             .case("Example", "example", None)
//             .case("Solution", include_str!("input"), None)
//             .collect()
//     }
// 
//     fn run_puzzle(input: Self::Input) -> Self::Output {
//         unimplemented!();
//     }
// }