use advent_lib::{
    cases::{GenericPuzzleCase, Puzzle, PuzzleCase, PuzzleRunner},
    helpers::StringAdventExt,
};
use std::{iter::Iterator, error::Error};

pub fn get_puzzles() -> Vec<Box<dyn Puzzle>> {
    vec![
        Box::new(Part1),
        // Box::new(Part2),
    ]
}

fn parse_input(input: &str) -> Result<Vec<u32>, Box<dyn Error>> {
    input
        .trimmed_lines()
        .map(str::parse)
        .collect::<Result<Vec<_>, _>>()
        .map_err(|err| err.into())
}

#[derive(Debug)]
pub struct Part1;

impl PuzzleRunner for Part1 {
    type Input = Vec<i32>;
    type Output = i32;

    fn name(&self) -> String {
        "{{YEAR}}-D{{DAY_PADDED}}-P1".to_owned()
    }

    fn cases(&self) -> Result<Vec<Box<dyn PuzzleCase>>, Box<dyn std::error::Error>> {
        Ok(GenericPuzzleCase::<Self, _, _>::build_set()
            .add_try_transform(parse_input)
            .transformed_case("Example", 42, None)?
            .transformed_case("Solution", include_str!("input"), None)?
            .collect())
    }

    fn try_run_puzzle(input: Self::Input) -> Result<Self::Output, Self::Error> {
        Err("Not implemented".into())
    }
}

// #[derive(Debug)]
// pub struct Part2;
//
// impl PuzzleRunner for Part2 {
//     type Input = Vec<i32>
//     type Output = i32;
//
//     fn name(&self) -> String {
//         "{{YEAR}}-D{{DAY_PADDED}}-P2".to_owned()
//     }
//
//     fn cases(&self) -> Result<Vec<Box<dyn PuzzleCase>>, Box<dyn std::error::Error>> {
//         Ok(GenericPuzzleCase::<Self, _, _>::build_set()
//             .add_try_transform(parse_input)
//             .transformed_case("Example", "example", None)?
//             .transformed_case("Solution", include_str!("input"), None)?
//             .collect())
//     }
//
//     fn try_run_puzzle(input: Self::Input) -> Result<Self::Output, Self::Error> {
//         Err("Not implemented".into())
//     }
// }
